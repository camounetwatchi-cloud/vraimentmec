# Fichier .ebextensions/socketio.config
# Met à jour la configuration de l'équilibreur de charge pour supporter les WebSockets.
option_settings:
  # Configuration pour l'Application Load Balancer (ALB)
  aws:elbv2:listener:443:
    # Si vous utilisez HTTPS/SSL (fortement recommandé), sinon utilisez 80:
    ListenerProtocol: HTTPS
    # Augmentez le temps d'inactivité du Load Balancer pour les jeux en temps réel
    # (Par défaut à 60 secondes). Nous utilisons 3600s (1 heure) ici.
    IdleTimeout: 3600
  aws:elbv2:listener:80:
    # Si vous n'utilisez PAS HTTPS/SSL, utilisez 80.
    ListenerProtocol: HTTP
    IdleTimeout: 3600
    
  # Configuration pour la connexion et la persistance des sessions
  aws:elb:loadbalancer:
    # Maintient la connexion entre le client et l'instance Beanstalk spécifique.
    # CRUCIAL pour les WebSockets et les sessions Flask-SocketIO.
    StickinessPolicy: true
    StickinessLBCookieDuration: 3600
  
  # Configuration du proxy Nginx pour passer les WebSockets
  aws:elasticbeanstalk:container:python:
    # Ajoute les en-têtes nécessaires pour le protocole WebSocket
    WSGIPath: application:application 
    # Assurez-vous que le WSGIPath pointe vers votre objet d'application Flask
    # (Dans app.py, nous avons 'application = app')

# COMMANDES POUR INSTALLER LES DÉPENDANCES SUPPLÉMENTAIRES (gevent, python-chess)
# Vous devez ajouter ces lignes à votre requirements.txt pour que Beanstalk les installe.
# Si vous utilisez déjà requirements.txt, retirez les commandes suivantes et assurez-vous
# que les dépendances sont dedans :
# - python-socketio
# - gevent
# - gevent-websocket
# - python-chess
# - Flask-SocketIO

# Commande optionnelle pour s'assurer que le serveur utilise gevent (le mode asynchrone)
# Le runcommand de Nginx utilise gunicorn qui doit être configuré pour gevent.
container_commands:
  01_install_gevent_dependencies:
    command: "pip install gevent gevent-websocket gunicorn"
    
  02_configure_gunicorn:
    command: "echo 'WSGIPath: application:application' >> /opt/python/etc/gunicorn.conf"
    # Ceci n'est pas toujours nécessaire car Beanstalk gère gunicorn,
    # mais assure qu'il utilise le chemin correct.

  03_set_gunicorn_worker_class:
    command: "echo 'worker_class = \"gevent\"' >> /opt/python/etc/gunicorn.conf"
    # Force Gunicorn à utiliser les workers gevent, essentiels pour le scaling des WebSockets.
